name: 📦 Release & Publish

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.changeset/**'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - manual
          - dry-run

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    name: 🚀 Release & Publish Packages
    runs-on: ubuntu-latest
    if: github.repository == 'ArthurProjectCorrea/template-project'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.6
          run_install: false

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🎯 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📚 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run Quality Checks
        run: |
          echo "🔍 Running linting..."
          pnpm lint
          
          echo "📝 Running type checking..."
          pnpm check-types
          
          echo "🧪 Running tests..."
          pnpm test
          
          echo "🏗️ Running build..."
          pnpm build

      - name: 🔍 Check for Changes
        id: check-changes
        run: |
          if [ -n "$(ls -A .changeset/*.md 2>/dev/null | grep -v README)" ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
            echo "📦 Changesets detected - proceeding with release"
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No changesets found - skipping release"
          fi

      - name: 📦 Create Release Pull Request or Publish
        if: steps.check-changes.outputs.has-changesets == 'true'
        uses: changesets/action@v1
        with:
          publish: pnpm changeset:publish
          title: '📦 Release: Version Packages'
          commit: 'chore(release): version packages'
          setupGitUser: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🏷️ Create GitHub Release
        if: steps.check-changes.outputs.has-changesets == 'true'
        run: |
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Generate release notes
          if [ -f "CHANGELOG.md" ]; then
            echo "📝 Extracting release notes from CHANGELOG.md"
            # Extract section for latest version
            RELEASE_NOTES=$(awk "/^## \[?${LATEST_TAG#v}/ {flag=1; next} /^## \[?[0-9]+/ {flag=0} flag" CHANGELOG.md)
          else
            RELEASE_NOTES="Automated release generated by changeset workflow."
          fi
          
          # Create GitHub release
          gh release create "$LATEST_TAG" \
            --title "Release $LATEST_TAG" \
            --notes "$RELEASE_NOTES" \
            --latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Release Summary
        if: steps.check-changes.outputs.has-changesets == 'true'
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Quality checks passed**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Packages published to NPM**" >> $GITHUB_STEP_SUMMARY
          echo "✅ **GitHub release created**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List published packages
          if [ -f "packages/components-core/package.json" ]; then
            CORE_VERSION=$(node -p "require('./packages/components-core/package.json').version")
            echo "- [@arthurcorreadev/components-core@$CORE_VERSION](https://www.npmjs.com/package/@arthurcorreadev/components-core)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Useful Links" >> $GITHUB_STEP_SUMMARY
          echo "- [NPM Registry](https://www.npmjs.com/~arthurcorreadev)" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          echo "- [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY

      - name: ℹ️ No Release Summary
        if: steps.check-changes.outputs.has-changesets == 'false'
        run: |
          echo "## ℹ️ No Release Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No changesets were found, so no packages need to be published." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To create a release:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run \`pnpm changeset\` to create changesets" >> $GITHUB_STEP_SUMMARY
          echo "2. Commit and push the changesets" >> $GITHUB_STEP_SUMMARY
          echo "3. This workflow will automatically handle versioning and publishing" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: 🚨 Notify on Failure
    runs-on: ubuntu-latest
    needs: release
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: 💬 Create Issue on Failure
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'release-failure',
              state: 'open'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Release Workflow Failed',
                body: `The release workflow failed on commit ${context.sha}.\n\n**Workflow**: ${context.workflow}\n**Run**: ${context.runNumber}\n**Actor**: ${context.actor}\n\nPlease check the workflow logs and resolve the issues.`,
                labels: ['release-failure', 'bug']
              });
            }
